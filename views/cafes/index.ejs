<%- include("../partials/header") %>

<div id='map' class=""></div>

<div class="container cafe-cards-div">
    <div class='index-add-cafe-button-div'>

        <a href="/cafes/new" class="btn-success-yun index-new-cafe-button">
            <strong>Add a New Cafe</strong>
        </a>
    </div>
    <div class="row">
        <% cafes.forEach(cafe => { %>
        <div class="col-md-11 col-lg-5 cafe-card">
            <img src="<%= cafe.images[0].url %>" alt="" class="index-image">
            <div class="card-text-div">
                <h2><%= cafe.name %></h2>
                <h4><%= cafe.area %></h4>
                <h5><%= cafe.comments.length %> <%= cafe.comments.length === 1 ? 'Comment' : 'Comments' %></h5>
                <% console.log(cafe.comments); %>
            </div>
            <div style='text-align: center;'>
                <a href="/cafes/<%= cafe._id %>"><button>See More</button></a>
            </div>
        </div>
        <% }); %>
    </div>
</div>


<script>
    mapboxgl.accessToken = '<%- process.env.MAPBOX_TOKEN %>';

    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        // style: 'mapbox://styles/mapbox/streets-v11',
        center: [139.71527, 35.67852],
        zoom: 11
    });

    map.on('load', function () {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('cafes', {

            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.

            data:
            {
                'features': [
                    <% cafes.forEach(cafe => { %>
                {
                    'geometry': {
                        'type': 'Point',
                        'coordinates': [
                                <%= cafe.geometry.coordinates[0] %>, 
                                <%= cafe.geometry.coordinates[1] %>
                            ]
                    },
                    'properties': {
                        'popupMarkup': '<%= cafe.name %>',
                        'cafeId': '<%= cafe.id %>',
                        'popupPhoto': '<%= cafe.images[0].url %>',
                    }
                },
                    <% }) %>
                ]
            },
            // 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',

            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on - default is 14
            clusterRadius: 50 // Radius of each cluster when clustering points - default is 50
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'cafes',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#32c1e9',
                    100,
                    'yellow',
                    750,
                    'red'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'cafes',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'cafes',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#32c1e9',
                'circle-radius': 8,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', function (e) {
            var features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            var clusterId = features[0].properties.cluster_id;
            map.getSource('cafes').getClusterExpansionZoom(
                clusterId,
                function (err, zoom) {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', function (e) {
            // console.log("FROM map.on function: ", e.features[0].properties.popupMarkup);
            // console.log("Event from map.on function: e.features", e.features[0]);

            var popupMarkup = e.features[0].properties.popupMarkup
            var coordinates = e.features[0].geometry.coordinates.slice();
            var popupId = e.features[0].properties.cafeId;
            var popupPhoto = e.features[0].properties.popupPhoto;
            console.log("CAFE ID: ", popupId)

            // var mag = e.features[0].properties.mag;
            // var tsunami;

            // if (e.features[0].properties.tsunami === 1) {
            //     tsunami = 'yes';
            // } else {
            //     tsunami = 'no';
            // }

            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(
                    // 'magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami
                    // `<a href="/cafes/${popupId}">${popupMarkup}</a>`
                    `<a href= "/cafes/${popupId}">
                    <img src="${popupPhoto}" alt="" class="cluster-map-popup-photo">
                    <br>
                    <h5 class="cluster-map-popup-cafeName">${popupMarkup}</h5>
                    </a>`
                )
                .addTo(map);
        });

        map.on('mouseenter', 'clusters', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', function () {
            map.getCanvas().style.cursor = '';
        });
    });
</script>

<%- include("../partials/footer") %>